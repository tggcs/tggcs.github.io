---
layout: post
title: "在线表格项目开发"
date: 2022-12-01 01:26:35 +0800
categories: project
tags:
  - 项目工程实践
  - 在线表格
  - 在线excel
  - spreadsheet
  - 前端
  - js
---
 




<tg-tit>N. 原型模式</tg-tit> 

定义：通过直接克隆来创建对象，‘实惠’的方式

<b>js中通过原型来实现继承</b>

- 原型编程的基本规则

1. 所有的数据都是对象。
2. 要得到一个对象，不是通过实例化类，而是找到一个对象作为原型并克隆它。
3. 对象会记住它的原型。
4. 如果对象无法响应某个请求，它会把这个请求委托给它自己的原型。

- 原型模式的天然实现 `Object.create`


# 单例模式

## 定义

保证一个类仅有一个实例，并提供一个访问它的全局访问点。

## 一般实现

```js
var Singleton = function (name) {
  this.name = name
  this.instance = null
}
Singleton.prototype.getName = function () {
  alert(this.name)
}
Singleton.getInstance = function (name) {
  if (!this.instance) {
    this.instance = new Singleton(name)
  }
  return this.instance
}
```

## 通用的惰性单例

```js
// 1.管理单例的逻辑
var getSingle = function (fn) {
  var result
  return function () {
    return result || (result = fn.apply(this, arguments))
  }
}
// 2.创建对象逻辑
var createLoginLayer = function () {
  var div = document.createElement('div')
  div.innerHTML = '我是登录浮窗'
  div.style.display = 'none'
  document.body.appendChild(div)
  return div
}

// 测试1 创建弹框
var createSingleLoginLayer = getSingle(createLoginLayer)

document.getElementById('loginBtn').onclick = function () {
  var loginLayer = createSingleLoginLayer()
  loginLayer.style.display = 'block'
}

// 测试2 创建iframe
var createSingleIframe = getSingle(function () {
  var iframe = document.createElement('iframe')
  document.body.appendChild(iframe)
  return iframe
})

document.getElementById('loginBtn').onclick = function () {
  var loginLayer = createSingleIframe()
  loginLayer.src = 'http://baidu.com'
}
```

todo 

把st悬浮提示框优化下

## 参考

1. JavaScript 设计模式与开发实践

2. [How To Work With Singletons in JavaScript](https://www.digitalocean.com/community/tutorials/js-js-singletons)

3. [The Singleton Pattern](https://www.patterns.dev/posts/classic-design-patterns/#singletonpatternjavascript)

# 简单工厂 & 工厂方法 & 抽象工厂模式


todo
1.`而在JavaScript这种类型模糊的语言中，对象多态性是天生的，一个变量既可以指向一个类，
又可以随时指向另外一个类。JavaScript不存在类型耦合的问题，自然也没有必要刻意去把对象“延
迟”到子类创建，也就是说，JavaScript实际上是不需要工厂方法模式的`
2. head first 再看下这块

# 